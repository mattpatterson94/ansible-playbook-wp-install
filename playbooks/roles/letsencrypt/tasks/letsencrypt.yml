---
- name: "Create required directories in /etc/letsencrypt"
  file:
    path: "/etc/letsencrypt/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=x,o=x
  become: yes
  tags:
    - letsencrypt
  with_items:
  - account
  - certs
  - csrs
  - keys

- name: "Generate a Let's Encrypt account key"
  shell: "if [ ! -f {{ letsencrypt_account_key }} ]; then openssl genrsa 4096 | sudo tee {{ letsencrypt_account_key }}; fi"
  become: yes
  tags:
    - letsencrypt

- name: "Generate Let's Encrypt private key"
  shell: "openssl genrsa 4096 | sudo tee {{ tls_certificate_key }}"
  become: yes
  tags:
    - letsencrypt

- name: "Generate Let's Encrypt CSR"
  shell: "openssl req -new -sha256 -key {{ tls_certificate_key }} -subj \"/CN={{ domain_name }}\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"\n[SAN]\nsubjectAltName=DNS:{{ domain_name }},DNS:{{ alt_domain_name }}\")) | sudo tee /etc/letsencrypt/csrs/{{ domain_name }}.csr"
  become: yes
  tags:
    - letsencrypt
  args:
    executable: /bin/bash

- name: Create a challenge for {{ domain_name }} using an account key file.
  community.crypto.acme_certificate:
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    src: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
    challenge: "{{ acme_challenge_type }}"
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    terms_agreed: 1
    # Renew if the certificate is at least 30 days old
    remaining_days: 60
  register: acme_challenge_domain_dns
  become: yes
  tags:
    - letsencrypt

- name: Create TXT record with the dns validation"
  community.general.cloudflare_dns:
    domain: "{{ domain_name_zone }}"
    record: "{{ acme_challenge_domain_dns.challenge_data[domain_name][acme_challenge_type].record }}"
    type: TXT
    value: "{{ acme_challenge_domain_dns.challenge_data[domain_name][acme_challenge_type].resource_value | regex_replace('^(.*)$', '\"\\1\"') }}"
    solo: true
    account_email: "{{ cloudflare_account_email }}"
    account_api_key: "{{ cloudflare_account_api_key }}"
    ttl: 60
    state: present
  when: acme_challenge_domain_dns is changed and domain_name in acme_challenge_domain_dns.challenge_data
  become: yes
  tags:
    - letsencrypt

- name: Create www TXT record with the dns validation"
  community.general.cloudflare_dns:
    domain: "{{ domain_name_zone }}"
    record: "{{ acme_challenge_domain_dns.challenge_data[alt_domain_name][acme_challenge_type].record }}"
    type: TXT
    value: "{{ acme_challenge_domain_dns.challenge_data[alt_domain_name][acme_challenge_type].resource_value | regex_replace('^(.*)$', '\"\\1\"') }}"
    solo: true
    account_email: "{{ cloudflare_account_email }}"
    account_api_key: "{{ cloudflare_account_api_key }}"
    ttl: 60
    state: present
  when: acme_challenge_domain_dns is changed and alt_domain_name in acme_challenge_domain_dns.challenge_data
  become: yes
  tags:
    - letsencrypt

- name: Let the challenge be validated and retrieve the cert and intermediate certificate
  community.crypto.acme_certificate:
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    src: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
    chain_dest: "{{ letsencrypt_certs_dir }}/chain_{{ domain_name }}.crt"
    fullchain_dest: "{{ tls_certificate }}"
    challenge: "{{ acme_challenge_type }}"
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    remaining_days: 60
    data: "{{ acme_challenge_domain_dns }}"
  when: acme_challenge_domain_dns is changed
  become: yes
  tags:
    - letsencrypt
